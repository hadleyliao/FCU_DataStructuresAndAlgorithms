<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/ArrayBinaryTreeGUI.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/ArrayBinaryTreeGUI.java" />
              <option name="originalContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;&#10;public class ArrayBinaryTreeGUI extends JPanel {&#10;    String[] arr = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;};&#10;    JTextField inputField;&#10;    JButton updateButton;&#10;    JButton deleteButton;&#10;    JButton randomButton;&#10;    JLabel infoLabel;&#10;    JRadioButton inorderButton;&#10;    JRadioButton preorderButton;&#10;    JRadioButton postorderButton;&#10;    JButton traverseButton;&#10;    JTextArea resultArea;&#10;&#10;    public ArrayBinaryTreeGUI() {&#10;        setLayout(new BorderLayout());&#10;        JPanel topPanel = new JPanel();&#10;        inputField = new JTextField(15); // 將欄位長度由30改為15&#10;        updateButton = new JButton(&quot;更新陣列&quot;);&#10;        deleteButton = new JButton(&quot;刪除節點&quot;);&#10;        randomButton = new JButton(&quot;隨機產生N個數字&quot;);&#10;        infoLabel = new JLabel(&quot;請輸入以逗號分隔的節點（如：A,B,C,D,E,F,G）&quot;);&#10;        topPanel.add(infoLabel);&#10;        topPanel.add(inputField);&#10;        topPanel.add(updateButton);&#10;        topPanel.add(deleteButton);&#10;        topPanel.add(randomButton);&#10;        add(topPanel, BorderLayout.NORTH);&#10;        updateButton.addActionListener(e -&gt; {&#10;            String text = inputField.getText().trim();&#10;            if (!text.isEmpty()) {&#10;                arr = text.split(&quot;,&quot;);&#10;                for (int i = 0; i &lt; arr.length; i++) {&#10;                    arr[i] = arr[i].trim();&#10;                    if (arr[i].isEmpty()) arr[i] = null;&#10;                }&#10;                repaint();&#10;            }&#10;        });&#10;        deleteButton.addActionListener(e -&gt; {&#10;            String key = inputField.getText().trim();&#10;            if (key.isEmpty()) return;&#10;            // 找到所有等於 key 的節點&#10;            for (int i = 0; i &lt; arr.length; i++) {&#10;                if (arr[i] != null &amp;&amp; arr[i].equals(key)) {&#10;                    // 判斷是否為樹葉節點&#10;                    int left = 2 * i + 1;&#10;                    int right = 2 * i + 2;&#10;                    boolean isLeaf = (left &gt;= arr.length || arr[left] == null) &amp;&amp; (right &gt;= arr.length || arr[right] == null);&#10;                    if (isLeaf) {&#10;                        arr[i] = null;&#10;                    } else {&#10;                        // 只將該節點及其子樹設為 null，不重整陣列&#10;                        deleteSubtree(i);&#10;                    }&#10;                }&#10;            }&#10;            repaint();&#10;        });&#10;        randomButton.addActionListener(e -&gt; {&#10;            String text = inputField.getText().trim();&#10;            int n;&#10;            try {&#10;                n = Integer.parseInt(text);&#10;            } catch (NumberFormatException ex) {&#10;                JOptionPane.showMessageDialog(this, &quot;請輸入有效的整數N&quot;);&#10;                return;&#10;            }&#10;            if (n &lt;= 0) {&#10;                JOptionPane.showMessageDialog(this, &quot;N必須大於0&quot;);&#10;                return;&#10;            }&#10;            // 產生不重複的隨機數字&#10;            java.util.Set&lt;Integer&gt; set = new java.util.LinkedHashSet&lt;&gt;();&#10;            java.util.Random rand = new java.util.Random();&#10;            int max = Math.max(n * 2, 100);&#10;            while (set.size() &lt; n) {&#10;                set.add(rand.nextInt(max));&#10;            }&#10;            // 將現有陣列擴充或覆蓋&#10;            arr = set.stream().map(String::valueOf).toArray(String[]::new);&#10;            repaint();&#10;        });&#10;        // 拜訪選項與結果顯示&#10;        inorderButton = new JRadioButton(&quot;Inorder&quot;);&#10;        preorderButton = new JRadioButton(&quot;Preorder&quot;);&#10;        postorderButton = new JRadioButton(&quot;Postorder&quot;);&#10;        traverseButton = new JButton(&quot;拜訪&quot;);&#10;        resultArea = new JTextArea(5, 60);&#10;        resultArea.setEditable(false);&#10;        JPanel traversePanel = new JPanel();&#10;        traversePanel.add(new JLabel(&quot;選擇拜訪方式：&quot;));&#10;        traversePanel.add(inorderButton);&#10;        traversePanel.add(preorderButton);&#10;        traversePanel.add(postorderButton);&#10;        traversePanel.add(traverseButton);&#10;        // add(traversePanel, BorderLayout.CENTER); // 移除這行&#10;        // add(new JScrollPane(resultArea), BorderLayout.SOUTH); // 移除這行&#10;        // 新增一個底層面板，垂直排列樹狀圖與拜訪選項&#10;        JPanel bottomPanel = new JPanel();&#10;        bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS));&#10;        bottomPanel.add(traversePanel);&#10;        bottomPanel.add(new JScrollPane(resultArea));&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;        traverseButton.addActionListener(e -&gt; {&#10;            StringBuilder sb = new StringBuilder();&#10;            if (inorderButton.isSelected()) {&#10;                sb.append(&quot;Inorder: &quot;);&#10;                inorder(0, sb);&#10;                sb.append(&quot;\n&quot;);&#10;            }&#10;            if (preorderButton.isSelected()) {&#10;                sb.append(&quot;Preorder: &quot;);&#10;                preorder(0, sb);&#10;                sb.append(&quot;\n&quot;);&#10;            }&#10;            if (postorderButton.isSelected()) {&#10;                sb.append(&quot;Postorder: &quot;);&#10;                postorder(0, sb);&#10;                sb.append(&quot;\n&quot;);&#10;            }&#10;            if (!inorderButton.isSelected() &amp;&amp; !preorderButton.isSelected() &amp;&amp; !postorderButton.isSelected()) {&#10;                sb.append(&quot;請至少選擇一種拜訪方式！\n&quot;);&#10;            }&#10;            resultArea.setText(sb.toString());&#10;        });&#10;    }&#10;&#10;    @Override&#10;    protected void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;        drawTree(g, 0, getWidth() / 2 - 15, 80, 120);&#10;    }&#10;&#10;    void drawTree(Graphics g, int index, int x, int y, int xOffset) {&#10;        if (index &gt;= arr.length || arr[index] == null) return;&#10;        g.drawOval(x, y, 30, 30);&#10;        g.drawString(arr[index], x + 12, y + 20);&#10;        int left = 2 * index + 1;&#10;        if (left &lt; arr.length &amp;&amp; arr[left] != null) {&#10;            g.drawLine(x + 15, y + 30, x - xOffset + 15, y + 80);&#10;            drawTree(g, left, x - xOffset, y + 80, xOffset / 2);&#10;        }&#10;        int right = 2 * index + 2;&#10;        if (right &lt; arr.length &amp;&amp; arr[right] != null) {&#10;            g.drawLine(x + 15, y + 30, x + xOffset + 15, y + 80);&#10;            drawTree(g, right, x + xOffset, y + 80, xOffset / 2);&#10;        }&#10;    }&#10;&#10;    // 遞迴刪除子樹&#10;    void deleteSubtree(int index) {&#10;        if (index &gt;= arr.length || arr[index] == null) return;&#10;        arr[index] = null;&#10;        deleteSubtree(2 * index + 1);&#10;        deleteSubtree(2 * index + 2);&#10;    }&#10;&#10;    // inorder 拜訪&#10;    void inorder(int index, StringBuilder sb) {&#10;        if (index &gt;= arr.length || arr[index] == null) return;&#10;        inorder(2 * index + 1, sb);&#10;        sb.append(arr[index]).append(&quot; &quot;);&#10;        inorder(2 * index + 2, sb);&#10;    }&#10;&#10;    // preorder 拜訪&#10;    void preorder(int index, StringBuilder sb) {&#10;        if (index &gt;= arr.length || arr[index] == null) return;&#10;        sb.append(arr[index]).append(&quot; &quot;);&#10;        preorder(2 * index + 1, sb);&#10;        preorder(2 * index + 2, sb);&#10;    }&#10;&#10;    // postorder 拜訪&#10;    void postorder(int index, StringBuilder sb) {&#10;        if (index &gt;= arr.length || arr[index] == null) return;&#10;        postorder(2 * index + 1, sb);&#10;        postorder(2 * index + 2, sb);&#10;        sb.append(arr[index]).append(&quot; &quot;);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        JFrame frame = new JFrame(&quot;Array Binary Tree Visualization&quot;);&#10;        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        frame.setSize(1000, 600);&#10;        frame.add(new ArrayBinaryTreeGUI());&#10;        frame.setVisible(true);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;&#10;public class ArrayBinaryTreeGUI extends JPanel {&#10;    String[] arr = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;, &quot;F&quot;, &quot;G&quot;};&#10;    JTextField inputField;&#10;    JButton updateButton;&#10;    JButton deleteButton;&#10;    JButton randomButton;&#10;    JLabel infoLabel;&#10;    JCheckBox inorderBox;&#10;    JCheckBox preorderBox;&#10;    JCheckBox postorderBox;&#10;    JButton traverseButton;&#10;    JTextArea resultArea;&#10;&#10;    public ArrayBinaryTreeGUI() {&#10;        setLayout(new BorderLayout());&#10;        JPanel topPanel = new JPanel();&#10;        inputField = new JTextField(15); // 將欄位長度由30改為15&#10;        updateButton = new JButton(&quot;更新陣列&quot;);&#10;        deleteButton = new JButton(&quot;刪除節點&quot;);&#10;        randomButton = new JButton(&quot;隨機產生N個數字&quot;);&#10;        infoLabel = new JLabel(&quot;請輸入以逗號分隔的節點（如：A,B,C,D,E,F,G）&quot;);&#10;        topPanel.add(infoLabel);&#10;        topPanel.add(inputField);&#10;        topPanel.add(updateButton);&#10;        topPanel.add(deleteButton);&#10;        topPanel.add(randomButton);&#10;        add(topPanel, BorderLayout.NORTH);&#10;        updateButton.addActionListener(e -&gt; {&#10;            String text = inputField.getText().trim();&#10;            if (!text.isEmpty()) {&#10;                arr = text.split(&quot;,&quot;);&#10;                for (int i = 0; i &lt; arr.length; i++) {&#10;                    arr[i] = arr[i].trim();&#10;                    if (arr[i].isEmpty()) arr[i] = null;&#10;                }&#10;                repaint();&#10;            }&#10;        });&#10;        deleteButton.addActionListener(e -&gt; {&#10;            String key = inputField.getText().trim();&#10;            if (key.isEmpty()) return;&#10;            // 找到所有等於 key 的節點&#10;            for (int i = 0; i &lt; arr.length; i++) {&#10;                if (arr[i] != null &amp;&amp; arr[i].equals(key)) {&#10;                    // 判斷是否為樹葉節點&#10;                    int left = 2 * i + 1;&#10;                    int right = 2 * i + 2;&#10;                    boolean isLeaf = (left &gt;= arr.length || arr[left] == null) &amp;&amp; (right &gt;= arr.length || arr[right] == null);&#10;                    if (isLeaf) {&#10;                        arr[i] = null;&#10;                    } else {&#10;                        // 只將該節點及其子樹設為 null，不重整陣列&#10;                        deleteSubtree(i);&#10;                    }&#10;                }&#10;            }&#10;            repaint();&#10;        });&#10;        randomButton.addActionListener(e -&gt; {&#10;            String text = inputField.getText().trim();&#10;            int n;&#10;            try {&#10;                n = Integer.parseInt(text);&#10;            } catch (NumberFormatException ex) {&#10;                JOptionPane.showMessageDialog(this, &quot;請輸入有效的整數N&quot;);&#10;                return;&#10;            }&#10;            if (n &lt;= 0) {&#10;                JOptionPane.showMessageDialog(this, &quot;N必須大於0&quot;);&#10;                return;&#10;            }&#10;            // 產生不重複的隨機數字&#10;            java.util.Set&lt;Integer&gt; set = new java.util.LinkedHashSet&lt;&gt;();&#10;            java.util.Random rand = new java.util.Random();&#10;            int max = Math.max(n * 2, 100);&#10;            while (set.size() &lt; n) {&#10;                set.add(rand.nextInt(max));&#10;            }&#10;            // 將現有陣列擴充或覆蓋&#10;            arr = set.stream().map(String::valueOf).toArray(String[]::new);&#10;            repaint();&#10;        });&#10;        // 拜訪選項與結果顯示&#10;        inorderBox = new JCheckBox(&quot;Inorder&quot;);&#10;        preorderBox = new JCheckBox(&quot;Preorder&quot;);&#10;        postorderBox = new JCheckBox(&quot;Postorder&quot;);&#10;        traverseButton = new JButton(&quot;拜訪&quot;);&#10;        resultArea = new JTextArea(3, 60);&#10;        resultArea.setEditable(false);&#10;        JPanel traversePanel = new JPanel();&#10;        traversePanel.add(new JLabel(&quot;選擇拜訪方式：&quot;));&#10;        traversePanel.add(inorderBox);&#10;        traversePanel.add(preorderBox);&#10;        traversePanel.add(postorderBox);&#10;        traversePanel.add(traverseButton);&#10;        JPanel bottomPanel = new JPanel();&#10;        bottomPanel.setLayout(new BoxLayout(bottomPanel, BoxLayout.Y_AXIS));&#10;        bottomPanel.add(traversePanel);&#10;        bottomPanel.add(new JScrollPane(resultArea));&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;        traverseButton.addActionListener(e -&gt; {&#10;            StringBuilder sb = new StringBuilder();&#10;            if (inorderBox.isSelected()) {&#10;                sb.append(&quot;Inorder: &quot;);&#10;                inorder(0, sb);&#10;                sb.append(&quot;\n&quot;);&#10;            }&#10;            if (preorderBox.isSelected()) {&#10;                sb.append(&quot;Preorder: &quot;);&#10;                preorder(0, sb);&#10;                sb.append(&quot;\n&quot;);&#10;            }&#10;            if (postorderBox.isSelected()) {&#10;                sb.append(&quot;Postorder: &quot;);&#10;                postorder(0, sb);&#10;                sb.append(&quot;\n&quot;);&#10;            }&#10;            if (!inorderBox.isSelected() &amp;&amp; !preorderBox.isSelected() &amp;&amp; !postorderBox.isSelected()) {&#10;                sb.append(&quot;請至少選擇一種拜訪方式！\n&quot;);&#10;            }&#10;            resultArea.setText(sb.toString());&#10;        });&#10;    }&#10;&#10;    @Override&#10;    protected void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;        drawTree(g, 0, getWidth() / 2 - 15, 80, 120);&#10;    }&#10;&#10;    void drawTree(Graphics g, int index, int x, int y, int xOffset) {&#10;        if (index &gt;= arr.length || arr[index] == null) return;&#10;        g.drawOval(x, y, 30, 30);&#10;        g.drawString(arr[index], x + 12, y + 20);&#10;        int left = 2 * index + 1;&#10;        if (left &lt; arr.length &amp;&amp; arr[left] != null) {&#10;            g.drawLine(x + 15, y + 30, x - xOffset + 15, y + 80);&#10;            drawTree(g, left, x - xOffset, y + 80, xOffset / 2);&#10;        }&#10;        int right = 2 * index + 2;&#10;        if (right &lt; arr.length &amp;&amp; arr[right] != null) {&#10;            g.drawLine(x + 15, y + 30, x + xOffset + 15, y + 80);&#10;            drawTree(g, right, x + xOffset, y + 80, xOffset / 2);&#10;        }&#10;    }&#10;&#10;    // 遞迴刪除子樹&#10;    void deleteSubtree(int index) {&#10;        if (index &gt;= arr.length || arr[index] == null) return;&#10;        arr[index] = null;&#10;        deleteSubtree(2 * index + 1);&#10;        deleteSubtree(2 * index + 2);&#10;    }&#10;&#10;    // inorder 拜訪&#10;    void inorder(int index, StringBuilder sb) {&#10;        if (index &gt;= arr.length || arr[index] == null) return;&#10;        inorder(2 * index + 1, sb);&#10;        sb.append(arr[index]).append(&quot; &quot;);&#10;        inorder(2 * index + 2, sb);&#10;    }&#10;&#10;    // preorder 拜訪&#10;    void preorder(int index, StringBuilder sb) {&#10;        if (index &gt;= arr.length || arr[index] == null) return;&#10;        sb.append(arr[index]).append(&quot; &quot;);&#10;        preorder(2 * index + 1, sb);&#10;        preorder(2 * index + 2, sb);&#10;    }&#10;&#10;    // postorder 拜訪&#10;    void postorder(int index, StringBuilder sb) {&#10;        if (index &gt;= arr.length || arr[index] == null) return;&#10;        postorder(2 * index + 1, sb);&#10;        postorder(2 * index + 2, sb);&#10;        sb.append(arr[index]).append(&quot; &quot;);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        JFrame frame = new JFrame(&quot;Array Binary Tree Visualization&quot;);&#10;        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;        frame.setSize(1000, 600);&#10;        frame.add(new ArrayBinaryTreeGUI());&#10;        frame.setVisible(true);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>